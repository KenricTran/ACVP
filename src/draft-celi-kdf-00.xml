<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-kdf-0.5" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
        <title abbrev="ACVP KDF">ACVP Key Derivation Function Algorithm JSON Specification</title>
        <!-- add 'role="editor"' below for the editors if appropriate -->
        <!-- Another author who claims to be an editor -->
        <author fullname="Christopher Celi" initials="C.C." role="editor" surname="Celi">
            <organization>National Institute of Standards and Technology</organization>
            <address>
                <postal>
                    <street>100 Bureau Drive</street>
                    <!-- Reorder these if your country does things differently -->
                    <city>Gaithersburg</city>
                    <region>MD</region>
                    <code>20899</code>
                    <country>USA</country>
                </postal>
                <email>christopher.celi@nist.gov</email>
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <date month="November" year="2018" />
        <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->
        <!-- Meta-data Declarations -->
        <area>General</area>
        <workgroup>TBD</workgroup>
        <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
        <keyword>acvp</keyword>
        <keyword>crypto</keyword>
        <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
        <abstract>
            <t>This document defines the JSON schema for using various KDF algorithms with the ACVP specification.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                The Automated Cryptographic Validation Protocol (ACVP) defines a mechanism to automatically
                verify the cryptographic implementation of a software or hardware cryptographic module. The intention of the protocol
                is to minimize human involvement in the testing of cryptography.
                The ACVP specification defines how a cryptographic module communicates with an ACVP
                server, including cryptographic capabilities negotiation, session management, authentication,
                vector processing and more. Note that the ACVP specification does not define algorithm-specific
                JSON constructs for performing the cryptographic validation. However, a series of ACVP sub-specifications
                defines the constructs for testing individual cryptographic algorithms. Each sub-specification
                addresses a specific class or subset of cryptographic algorithms. This sub-specification defines the JSON
                constructs for testing key-deriviation functions (KDFs) using ACVP.  The ACVP server performs a set
                of tests on the functions in order to assess the correctness and robustness of the
                implementation. A typical ACVP validation session would require multiple tests to be performed for every supported
                cryptographic algorithm, such as the KDFs for SSH, TLS and SNMP.
            </t>

            <section title="Requirements Language">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                    document are to be interpreted in
                    <xref target="RFC2119">RFC 2119</xref>
                    .
                </t>
            </section>
        </section>

        <section anchor="supported_algs" title="Supported Key-Derivation Functions">
            <t>The following key-derivation functions MAY be advertised by the ACVP compliant cryptographic module:</t>
            <t>
                <list style="symbols">
                    <t>Feedback</t>
                    <t>Counter</t>
                    <t>DoublePipelineIterator</t>
                    <t>IKEv1</t>
                    <t>IKEv2</t>
                    <t>ANSIx9.63</t>
                    <t>SNMP</t>
                    <t>SRTP</t>
                    <t>SSH</t>
                    <t>TLS</t>
                    <t>TPM</t>
                </list>
            </t>
        </section>

        <section anchor="testtypes" title="Test Types and Test Coverage">
            <t>
                This section describes the design of the tests used to validate implementations of KDFs.

                <list style="symbols">
                    <t>
                        "AFT" - 
                    </t>
                    <t>
                        "MCT" - 
                    </t>
                    <t>
                        "CTR" - 
                    </t>
                </list>
            </t>

            <section anchor="test_coverage" title="Test Coverage">
                <t>
                </t>
            </section>
        </section>

        <section anchor="caps_reg" title="Capabilities Registration">
            <t>
                This section describes the constructs for advertising support of KDFs to the
                ACVP server. ACVP REQURIES cryptographic modules to register their capabilities in a registration.
                This allows the cryptographic module to advertise support for specific algorithms, notifying the ACVP server which
                algorithms need test vectors generated for the validation process.
            </t>

            <t>
                The KDF capabilities MUST be advertised as JSON objects within the 'algorithms'
                value of the ACVP registration message. The 'algorithms' value MUST be an array, where each
                array element is an individual JSON object defined in this section. The 'algorithms'
                value MUST be part of the 'capability_exchange' element of the ACVP JSON registration message.
                See the ACVP Protocol Specification Section XXX for details on the registration message.

                Each KDF capability advertised SHALL be a self-contained JSON object.
            </t>

            <section anchor="prereq_algs" title="Required Prerequisite Algorithms for KDF135 IKEv1 Validations">
                <t>
                    Some KDF algorithm implementations rely on other cryptographic primitives. 
                    For example, IKEv1 uses an underlying SHA algorithm. Each of these underlying algorithm primitives
                    must be validated, either separately or as part of the same submission. ACVP provides a mechanism 
                    for specifying the required prerequisites:
                </t>
                <texttable anchor="rereqs_table" title="Required Prerequisite Algorithms JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Valid Values</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>algorithm</c>
                    <c>a prerequisite algorithm</c>
                    <c>value</c>
                    <c>HMAC, SHA</c>
                    <c>No</c>

                    <c>valValue</c>
                    <c>algorithm validation number</c>
                    <c>string</c>
                    <c>actual number or "same" to refer to the same submission</c>

                    <c>prereqAlgVal</c>
                    <c>prerequisite algorithm validation</c>
                    <c>object</c>
                    <c>exactly one algorithm property and one valValue property</c>
                </texttable>
            </section>

            <section anchor="cap_ex" title="KDF Algorithm Capabilities JSON Values">
                <t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
                <texttable anchor="caps_table" title="KDF Algorithm Capabilities JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <c>algorithm</c>
                    <c>The KDF to be validated</c>
                    <c>string</c>

                    <c>mode</c>
                    <c>The KDF to be validated</c>
                    <c>string</c>

                    <c>prereqVals</c>
                    <c>Prerequisite algorithm validations</c>
                    <c>array of prereqAlgVal objects described in <xref target="prereq_algs" /></c>

                    <c>capabilities</c>
                    <c>array of JSON objects, each with fields pertaining to the KDF mode identified uniquely by the combination of properties</c>
                    <c>array of JSON objects as described in <xref target="supported_modes" /></c>
                </texttable>

                <t>
                    Note: Some optional values are required depending on the algorithm. 
                    Failure to provide these values will result in the ACVP server returning an error to the ACVP client during registration.
                </t>
            </section>

            <section anchor="supported_modes" title="Supported KDF Capabilities">
                <t>
                    The KDF mode capabilities are advertised as JSON objects within the 'capabilities' 
                    value of the ACVP registration message - see <xref target="caps_table"/>. The 'capabilities' 
                    value is an array, where each array element is a JSON object corresponding to a particular KDF mode 
                    defined in this section. The 'capabilities' value is part of the 'capability_exchange' element of 
                    the ACVP JSON registration message.	See the ACVP specification for details on the registration message.
                </t>
                <t>Each KDF mode's capabilities are advertised as JSON objects and MAY be advertised by the ACVP compliant cryptographic module:</t>
                <texttable anchor="capabilities_table" title="KDF Capabilities JSON Values">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <c>authenticationMethod</c>
                    <c>The mode of authentication used by the IUT</c>
                    <c>string</c>

                    <c>initiatorNonceLength</c>
                    <c>The supported initiator nonce lengths used by the IUT in bits</c>
                    <c>domain</c>

                    <c>responderNonceLength</c>
                    <c>The lengths of data the IUT supports in bits</c>
                    <c>domain</c>

                    <c>diffieHellmanSharedSecretLength</c>
                    <c>The lengths of Diffie Hellman shared secrets the IUT supports in bits</c>
                    <c>domain</c>

                    <c>preSharedKeyLength</c>
                    <c>The lengths of pre-shared key the IUT supports in bits</c>
                    <c>domain</c>

                    <c>hashAlg</c>
                    <c>Valid hash algorithms used by the IUT</c>
                    <c>array of strings</c>

                    <c>macMode</c>
                    <c>The MAC used by the IUT</c>
                    <c>array of strings</c>

                    <c>supportedLengths</c>
                    <c>The output lengths supported by the IUT in bits</c>
                    <c>domain</c>

                    <c>fixedDataOrder</c>
                    <c>Describes where the counter is slotted into the fixedData</c>
                    <c>array of strings</c>

                    <c>counterLength</c>
                    <c>Length of the counter used by the IUT</c>
                    <c>array of integers</c>

                    <c>supportsEmptyIv</c>
                    <c>Whether or not the IUT supports an empty IV for a Feedback KDF</c>
                    <c>boolean</c>

                    <c>derivedKeyingMaterialLength</c>
                    <c>Length of the derived keying material for IKEv2</c>
                    <c>domain</c>

                    <c>cipher</c>
                    <c>Cipher engine used within the pseudo-random function for the KDF</c>
                    <c>array of strings</c>

                    <c>kdrExponent</c>
                    <c>Key derivation rate as an exponent of 2 for SRTP KDF. A kdrExponent of 3 corresponds to a key derivation rate of 2^3 = 8</c>
                    <c>array of integers</c>

                    <c>supportsZeroKdr</c>
                    <c>Whether or not the SRTP IUT supports an empty key derivation rate</c>
                    <c>boolean</c>

                    <c>fieldSize</c>
                    <c>The size of the field used in ANSI x9.63 KDF</c>
                    <c>array of integers</c>

                    <c>sharedInfoLength</c>
                    <c>Size of shared information used in ANSI x9.63 KDF</c>
                    <c>domain</c>

                    <c>keyLength</c>
                    <c>Output key length supported by ANSI x9.63 KDF</c>
                    <c>domain</c>

                    <c>engineId</c>
                    <c>The engine identifier used in SNMP KDF</c>
                    <c>array of strings</c>

                    <c>passwordLength</c>
                    <c>Length of the password supported for SNMP KDF in bits. Password lengths must occur on byte boundaries</c>
                    <c>domain</c>

                    <c>tlsVersion</c>
                    <c>Version of the TLS protocol used for the TLS KDF</c>
                    <c>array of strings</c>
                </texttable>
            </section>
        </section>
        <section anchor="test_vectors" title="Test Vectors">
            <t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to	    the ACVP server for validation.  A typical ACVP validation session would require multiple test vector	    sets to be downloaded and processed by the ACVP client.  Each test vector set represents an individual	    Key Derivation Function (KDF), such as SNMP, SSH,  etc.  This section	describes the JSON schema for a test vector set used with SP800-135 IKEv1 KDF algorithms.</t>
            <t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire	vector set as well as individual test vectors to be processed by the ACVP client.The following table describes the JSON elements at the top level of the hierarchy.	</t>
            <texttable anchor="vs_top_table" title="Vector Set JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                <c>acvVersion</c>
                <c>Protocol version identifier</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>vsId</c>
                <c>Unique numeric identifier for the vector set</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>algorithm</c>
                <c>"kdf-components"</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>mode</c>
                <c>"ikev1"</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>testGroups</c>
                <c>Array of test group JSON objects, which are defined in                     
                    <xref target="tgjs" />
                </c>
                <c>array</c>
            </texttable>
            <section title="Test Groups JSON Schema" anchor="tgjs">
                <t>The testGroups element at the top level in the test vector JSON object is an array of test		groups.  Test vectors are grouped into similar test cases to reduce the amount of data transmitted	        in the vector set.  For instance, all test vectors that use the same key size would be grouped	        together.  The Test Group JSON object contains meta data that applies to all test vectors within	        the group. The following table describes the IKEv1 JSON elements of the Test Group JSON object.</t>
                <texttable anchor="vs_tg_table1" title="IKEv1 Test Group JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    
                    <c>tgId</c>
					<c>Numeric identifier for the test group, unique across the entire vector set.</c>
					<c>value</c>
					<c>No</c>
					<c/>
					<c/>
					<c/>
					<c/>
                    
                    <c>authenticationMethod</c>
                    <c>The method used for the test vectors.  See                         
                        <xref target="supported_modes" />
 for possible values                    
                    </c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>dhLength</c>
                    <c>Diffie-Hellman shared secret length in bits</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>hashAlg</c>
                    <c>The SHA value used</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nInitLength</c>
                    <c>Length of initiator nonce in bits</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nRespLength</c>
                    <c>Length of responder nonce in bits</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>preSharedKeyLength</c>
                    <c>Pre-shared key length in bits</c>
                    <c>value</c>
                    <c>Yes</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>tests</c>
                    <c>Array of individual test vector JSON objects, which are defined in                         
                        <xref target="tvjs" />
                    </c>
                    <c>array</c>
                    <c>No</c>
                </texttable>
            </section>
            <section title="Test Case JSON Schema" anchor="tvjs">
                <t>Each test group contains an array of one or more test cases.  Each test case is a JSON object		that represents a single test vector to be processed by the ACVP client.  The following table describes	    the JSON elements for each SP800-135 IKEv1 KDF test vector.</t>
                <texttable anchor="vs_tc_table1" title="Test Case JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <ttcol align="left">Optional</ttcol>
                    <c>tcId</c>
                    <c>Numeric identifier for the test case, unique across the entire vector set.</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ckyInit</c>
                    <c>Initiator's cookie</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>ckyResp</c>
                    <c>Responder's cookie</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nInit</c>
                    <c>Value of the initiator nonce</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>nResp</c>
                    <c>Value of the responder nonce</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>gxy</c>
                    <c>Diffie-Hellman shared secret</c>
                    <c>value</c>
                    <c>No</c>
                    <c/>
                    <c/>
                    <c/>
                    <c/>
                    <c>preSharedKey</c>
                    <c>Value of the pre-shared key</c>
                    <c>value</c>
                    <c>Yes</c>
                </texttable>
            </section>
        </section>
        <section anchor="vector_responses" title="Test Vector Responses">
            <t>After the ACVP client downloads and processes a vector set, it must send the response vectors	back to the ACVP server.  The following table describes the JSON object that represents a vector set response.</t>
            <texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                
                <c>acvVersion</c>
                <c>Protocol version identifier</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>

                <c>vsId</c>
                <c>Unique numeric identifier for the vector set</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>

                <c>testGroups</c>
				<c>Array of JSON objects that represent each test vector group. See					<xref target="vr_group_table"/>
				</c>
				<c>array</c>
				<c/>
				<c/>
				<c/>
            </texttable>

            <t>The testGroups section is used to organize the ACVP client response in a similar manner 
      to how it receives vectors.  Several algorithms SHALL require the client to send back group 
      level properties in their response.  This structure helps accommodate that.</t>

			<texttable anchor="vr_group_table" title="Vector Set Group Response JSON Object">
				<ttcol align="left">JSON Value</ttcol>
				<ttcol align="left">Description</ttcol>
				<ttcol align="left">JSON type</ttcol>

				<c>tgId</c>
				<c>The test group Id</c>
				<c>value</c>
				<c/>
				<c/>
				<c/>
				<c>tests</c>
				<c>The tests associated to the group specified in tgId</c>
				<c>value</c>
				<c/>
				<c/>
				<c/>
			</texttable>

            <t>The following table describes the JSON object that represents a vector set response for IKEv1.</t>
            <texttable anchor="vr_top_table1" title="Vector Set Response JSON Object">
                <ttcol align="left">JSON Value</ttcol>
                <ttcol align="left">Description</ttcol>
                <ttcol align="left">JSON type</ttcol>
                
                <c>tcId</c>
				<c>Numeric identifier for the test case, unique across the entire vector set.</c>
				<c>value</c>
				<c>No</c>
				<c/>
				<c/>
				<c/>
				<c/>

                <c>sKeyId</c>
                <c>Results of the extraction step</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>sKeyIdD</c>
                <c>Results of the expansion step</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>sKeyIdA</c>
                <c>Results of the expansion step</c>
                <c>value</c>
                <c/>
                <c/>
                <c/>
                <c>sKeyIdE</c>
                <c>Results of the expansion step</c>
                <c>value</c>
            </texttable>
        </section>
        <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>TBD...</t>
        </section>
        <!-- Possibly a 'Contributors' section ... -->
        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>
        <section anchor="Security" title="Security Considerations">
            <t>Security considerations are addressed by the ACVP specification.</t>
        </section>
    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <references title="Normative References">
            <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->      &RFC2119;                  
            <reference anchor="ACVP">
                <!-- the following is the minimum to make xml2rfc happy -->
                <front>
                    <title>ACVP Specification</title>
                    <author initials="authInitials" surname="authSurName">
                        <organization>NIST</organization>
                    </author>
                    <date year="2016" />
                </front>
            </reference>
        </references>
        <section anchor="app-reg-ex" title="Example SP800-135 IKEv1 KDF Capabilities JSON Object">
            <t>The following is a example JSON object advertising support for SHA-256.</t>
            <figure>
                <artwork>
                    <![CDATA[
{
    "algorithm": "kdf-components",
    "mode": "ikev1",
    "prereqVals": [
        {
            "algorithm": "SHA",
            "valValue": "123456"
        },
        {
            "algorithm": "HMAC",
            "valValue": "123456"
        }
    ],
    "capabilities": [
        {
            "AuthenticationMethod": "dsa",
            "InitiatorNonceLength": [
                {
                    "min": 64,
                    "max": 2048,
                    "increment": 1
                }
            ],
            "ResponderNonceLength": [
                {
                    "min": 64,
                    "max": 2048,
                    "increment": 1
                }
            ],
            "DiffieHellmanSharedSecretLength": [
                {
                    "min": 224,
                    "max": 8192,
                    "increment": 1
                }
            ],
            "HashAlg": [
                "SHA-1",
                "SHA2-224",
                "SHA2-256",
                "SHA2-384",
                "SHA2-512"
            ]
        },
        {
            "AuthenticationMethod": "psk",
            "InitiatorNonceLength": [
                {
                    "min": 64,
                    "max": 2048,
                    "increment": 1
                }
            ],
            "ResponderNonceLength": [
                {
                    "min": 64,
                    "max": 2048,
                    "increment": 1
                }
            ],
            "PreSharedKeyLength": [
                {
                    "min": 8,
                    "max": 8192,
                    "increment": 1
                }
            ],
            "DiffieHellmanSharedSecretLength": [
                {
                    "min": 224,
                    "max": 8192,
                    "increment": 1
                }
            ],
            "HashAlg": [
                "sha-1",
                "SHA2-224",
                "SHA2-256",
                "SHA2-384",
                "SHA2-512"
            ]
        },
        {
            "AuthenticationMethod": "pke",
            "InitiatorNonceLength": [
                {
                    "min": 64,
                    "max": 2048,
                    "increment": 1
                }
            ],
            "ResponderNonceLength": [
                {
                    "min": 64,
                    "max": 2048,
                    "increment": 1
                }
            ],
            "DiffieHellmanSharedSecretLength": [
                {
                    "min": 224,
                    "max": 8192,
                    "increment": 1
                }
            ],
            "HashAlg": [
                "SHA-1",
                "SHA2-224",
                "SHA2-256",
                "SHA2-384",
                "SHA2-512"
            ]
        }
    ]
}
            ]]>
                </artwork>
            </figure>
        </section>
        <section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
            <t>The following is a example JSON object for SP800-135 IKEv1 KDF test vectors sent from the ACVP server to the crypto module.</t>
            <figure>
                <artwork>
                    <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1564,
		"algorithm": "IKEv1",
		"testGroups": [{
				"tgId": 1,
				"authenticationMethod": "dsa",
				"hashAlg": "SHA-1",
				"nInitLength": 64,
				"nRespLength": 64,
				"dhLength": 3794,
				"tests": [{
					"tcId": 1,
					"nInit": "D7965167F186B5C1",
					"nResp": "F3B1CD728B9BE97D",
					"ckyInit": "D93E766AC69F5B3C",
					"ckyResp": "E6552343EF4C3676",
					"gxy": "648A4DF592307C667D9EE9F286EFF27B7C3A3E1313C2CBEE595FCF24877A4CCFF64A847E1FA20990A7152A6A93C55DC8903FD992D39B84E8C86D579B81237BA7C9BDB824F8427B558D11EE98EBD45BF13B9007C2E2564DAE6F7C805AF7D6A295AE167EEFB65958D7C2FBE9210A346588884F7263B929BE086D6E7E511A7E51B632F8CD115D2400ADF3C0ECA09EFADCEDCDDA99494CD54EBB67DBD3F6C74C98EF9C87DC272233A36198FF3907A525E4416545DDF32DEE3E0F1FEF450045D96D2CC89186833C4233AB8DC7378B24AEAAACDC59D074B96141630B1869159F3168D08A1DB60F9280DB35BA5714AF51492789052431AEE9F74A7EA15943D7B7EDC2E27688D44C37AFD10E08BA6BC3E022BC4F302103A1D39F599EA9EDFF63CEE3F0265AF4920DD857AA48C6054E4395F42C60FD12FBA7D41D970896ECA3E1F89713973DC1F7CC43B961EB8917FFAAE8304B0D8FB7FAE27B2DE812C115873A03336085F07673E0C1FC18F8357695FC70981E1DE6A715191D03CDB1A2F9889C7157221ED43003064E71B4A4D11826489F8ACC89F23891255234B6337C8212B66129D01BBF35473D21D056B7CC674D93374A33B570298641B2E1541B6D2516A4E9810C1EEB1D92D3007CB3787A0406A64FE3185366FC37AD48BB7951C84780"
				}]
			},
			{
				"tgId": 2,
				"authenticationMethod": "psk",
				"hashAlg": "SHA-1",
				"nInitLength": 227,
				"nRespLength": 64,
				"dhLength": 224,
				"preSharedKeyLength": 8,
				"tests": [{
					"tcId": 1501,
					"nInit": "42C0DE5D47C2CF363EBFE6847D4B55D8F8EC1F58867B51070EC0E0BB00",
					"nResp": "3192D20E80961883",
					"ckyInit": "0745FD92564BE166",
					"ckyResp": "2C59CB8F0199A372",
					"gxy": "4F7837D07B1E9EB353BDB8C7DCB947CAE24049C382458BC8EE5EB46E",
					"preSharedKey": "6C"
				}]
			},
			{
				"tgId": 3,
				"authenticationMethod": "pke",
				"hashAlg": "SHA-1",
				"nInitLength": 784,
				"nRespLength": 64,
				"dhLength": 224,
				"tests": [{
					"tcId": 3001,
					"nInit": "1FD16DF313FAE5942265310E8D0061478DC77B62D76FB65DA278AB8A2C3503B0809DC54921B42BC2334785B38AA65E48D1FE077111071FE41B8EA73FBC18DCA819BCB4EB48334694388D6AF654D1EC4AB868A309DD1C6C35890E7C6749644F9D3ED9",
					"nResp": "9C47D2D26D608781",
					"ckyInit": "46D07016FC2D03E5",
					"ckyResp": "7E7110C5E8D92764",
					"gxy": "CCAFB314240C68040AA7641975BA591ADA5650E4EFAE65B1A597129D"
				}]
			}
		]
	}
]
            ]]>
                </artwork>
            </figure>
        </section>
        <section anchor="app-results-ex" title="Example Test Results JSON Object">
            <t>The following is a example JSON object for SP800-135 IKEv1 KDF test results sent from the crypto module to the ACVP server.</t>
            <figure>
                <artwork>
                    <![CDATA[
[{
		"acvVersion": <acvp-version>
	},
	{
		"vsId": 1564,
		"testGroups": [{
				"tgId": 1,
				"tests": [{
					"tcId": 1,
					"sKeyId": "F4818718FC105FACF05F5C77ED7648531FA3CBD9",
					"sKeyIdD": "2416325BA038A28B8263060A8C33B0DAB0C369BD",
					"sKeyIdA": "514EEBEF3A8135ADB8FF3514ED1F6E524BBBEBB9",
					"sKeyIdE": "6AC021B419C196EA83E9052DCC0DF87B0F19BDD6"
				}]
			},
			{
				"tgId": 2,
				"tests": [{
					"tcId": 1501,
					"sKeyId": "01EACF38DE6D5FC8BBF36D7D8EB8075DF0B462BF",
					"sKeyIdD": "8AD25FBE26F21C0E3ADA9ECA02999BB666E1A4E4",
					"sKeyIdA": "F8820DC28C0ABCF87DF32630A69AE51394291495",
					"sKeyIdE": "B9E283B6DA93A875A43BDD28FCD0CAE7B452C1B9"
				}]
			},
			{
				"tgId": 3,
				"tests": [{
					"tcId": 3001,
					"sKeyId": "3DB972E5BECC0382FBE8A8E373F6560541D78394",
					"sKeyIdD": "0A962B834E0FF947ADD64596C6291B8614D2C7C0",
					"sKeyIdA": "A82E520D6DA16DEF41B0C75A5B92F5FD31A5EFBA",
					"sKeyIdE": "65A1254642B871147BB4D1EABCD6286F3CF131E6"
				}]
			}
		]
	}
]
            ]]>
                </artwork>
            </figure>
        </section>
    </back>
</rfc>
